Product Inventory Audit Data Extraction Application
===================================================

Submission for challenge #30052521:
  "HP PRODUCT INVENTORY AUDIT DATA EXTRACTION - PRODUCT AND SEARCH ENHANCEMENTS"


The Deployment Guide is located in the "doc" directory of the submission. For this submission, we're using
schema version number "3", located under the schema directory.

A video instruction on how to deploy and run the application is located at:

http://youtu.be/BbwsGE6D7aM

--------------------------
to run unit tests:
./gradlew test
--------------------------

To test this submission requirements:
  - load schema version 2 (schema/2/schema.sql)
  - upgrade using schema version 3 upgrade script (schema/3/upgrade.sql)
  - follow deployment guide
  - inspect the Vertica tables
  - repeat using the schema version 3 (schema/3/upgrade.sql)

Notes:
  - All challenge requirements implemented.

  - To accommodate generic products, we create "parseDate" and "hpDataSheet" in the Product table.

  - Created a "fullText" field in Product for the first requirement. The full text root element and excluded elements
    are configurable. It may include common template text like "Please enter your email ...". That shouldn't be an
    issue since any decent search engine will regard those as irrelevant.

  - Because multiple URL refer to a single product we have duplicate pages in data directory. I added a feature
    to avoid processing the same product multiple times. **This is enabled by default**. To disable this feature
    and return to old behavior, just pass the "--parse-duplicates" in the command-line.

  - Created a new "detect" result handler. It works similarly to the JSON one, but outputs only the parser detection
    results to a CSV file.

  - Implemented a progress logger, more useful for iterative execution. The default logger level for
    DBResultHandler was changed to WARN to avoid too much data in the console.

  - Generic products (those without a dedicated parser) are categorized using the categories embedded in the
    HTML page.

  - We removed the redundant IProduct interface, replacing by an AbstractProduct class. There are a number of
    recommended refactorings that could be made to avoid data duplication in the DB but as these might affect
    other applications those refactorings were not made.

  - Improved some JavaDoc documentation in general.

  - Refactored rules configuration out of DocumentParser. Some more complex extraction logic was split into
    more manageable "Extractor" classes. The DocumentParser class was becoming a monster...

SQL queries suggested to check for requirements:

  - Check full page text:
      select productNumber, productName, fullText from Product where productNumber = 'A0X35AA#ABA';

  - Check typo fix:
      select productNumber, productName, productUrl, pointingDevices
      from Laptop
      where pointingDevices is not null;

  - Check generic products were added (pricing, availability and rating):
      select  p.productNumber, p.productName, p.productType,
              coalesce(p.availableForSaleDate, p.comingSoonDate) as inStoreDate
      from Product as p
      where productNumber in ('A0X35AA#ABA', 'E5M78AA#ABL', 'H1D24UT', 'G1K47AA#ABL', 'H5W94AA#ABA', 'J0J89AA#ABA', 'QZ6078');

  - Check generic products were added (reviews):
      select productNumber, username, location, rating, title, comments
      from ProductReview
      where productNumber in ('A0X35AA#ABA', 'E5M78AA#ABL');

  - Check related accessories:
      select p.productNumber, p.productName, p.productType,
             a.productNumber as accNumber, a.productName as accName, a.productType as accType
      from Product as p
      join RelatedAccessory ra on p.productNumber = ra.productNumber
      join Product as a on ra.accessoryProductNumber = a.productNumber
      where p.productNumber in ('A7F64A#B1H', 'N1N00AV#ABA_1')

  - Check monitors:
      select * from Monitor;

  - Check inks and toners:
      select * from InkAndToner;

  - Check high-end printers (note: no Scitex or PageWide printers found in data):
      select * from Printer where
        productName like '%Latex%' or
        productName ilike '%designjet%' or
        productName ilike '%scitex%' or
        productName ilike '%pagewide%'

  - Check generic product type classification:
      select productNumber, productName, productType, productUrl from Product
      where
        productType not in ('Destkop', 'Laptop', 'Tablet', 'Inkjet Printer',
                            'Laser Printer', 'HighEnd Printer', 'Monitor', 'InkAndToner')
      order by productName